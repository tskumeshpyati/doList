{"version":3,"sources":["components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","useState","setItems","currentItem","setCurrentItem","onSubmit","preventDefault","placeholder","name","Date","now","handleInput","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAwCeA,EAnCE,SAACC,GACd,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAM,yBAAKC,UAAY,OAAOC,IAAOF,EAAKE,KAC9B,2BACI,2BACIC,KAAO,OACPC,GAAMJ,EAAKE,IACXG,MAASL,EAAKM,KACdC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAIjD,8BACI,kBAAC,IAAD,CACID,UAAY,UACZU,KAAO,QACPC,QAAW,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAQjE,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAY,IAAKC,OAAS,eAC/BlB,K,eC7BjBmB,IAAQC,IAAIC,KA8DGC,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNtB,EADM,KACCuB,EADD,OAEyBD,mBAAS,CAC7Cd,KAAM,GACNJ,IAAI,KAJO,mBAENoB,EAFM,KAEOC,EAFP,KAMNjB,EAAagB,EAAbhB,KA+BP,OA/BoBgB,EAAPpB,IAgCT,yBAAKD,UAAY,OACf,gCACI,0BAAMG,GAAK,aAAaoB,SAtBlB,SAAChB,GACfA,EAAEiB,iBACoB,KAAnBH,EAAYhB,MACbe,EAAS,GAAD,mBAAKvB,GAAL,CAAYwB,KAEtBC,EAAe,CACbjB,KAAK,GACLJ,IAAI,OAgBM,2BACEC,KAAO,OACPuB,YAAc,aACdC,KAAO,OACPtB,MAAQC,EACRC,SAAY,SAACC,GAAD,OAvCR,SAAAA,GAAK,IAAD,EACtBe,GAAc,mBACTf,EAAEE,OAAOiB,KAAMnB,EAAEE,OAAOL,OADf,oBAENuB,KAAKC,OAFC,IAsCiBC,CAAYtB,MAE/B,4BAAQL,KAAO,UAAf,SAGR,kBAAC,EAAD,CACEL,MAASA,EACTe,WAtCW,SAACX,GAClBmB,EAASvB,EAAMiC,QAAO,SAAA/B,GAAI,OAAIA,EAAKE,KAAKA,OAsClCO,UA1BU,SAACH,EAAMJ,GACvBJ,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAOA,MAGhBe,EAAS,YAAIvB,SC9BGkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe197aed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItem.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ListItem = (props)=>{\r\n    const items = props.items;\r\n    const listItems = items.map(item=>{\r\n        return<div className = \"list\" key = {item.key}>\r\n                    <p>\r\n                        <input \r\n                            type = \"text\"\r\n                            id = {item.key}\r\n                            value = {item.text}\r\n                            onChange = {\r\n                                (e)=>{\r\n                                    props.setUpdate(e.target.value, item.key)\r\n                                }\r\n                            }\r\n                        />\r\n                        <span>\r\n                            <FontAwesomeIcon \r\n                                className = \"faicons\" \r\n                                icon = \"trash\"\r\n                                onClick = {()=>props.deleteItem(item.key)}\r\n                            />\r\n                        </span>\r\n                    </p>\r\n                    \r\n                </div>\r\n        \r\n    })\r\n    return(\r\n        <div>\r\n            <FlipMove duration = {500} easing = \"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\nexport default ListItem;","import React, { useState } from 'react';\nimport './App.css';\nimport ListItem from './components/ListItem';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [currentItem, setCurrentItem] = useState({\n    text: '',\n    key:''\n  });\n  const {text, key} = currentItem;\n  const handleInput = e=> {\n    setCurrentItem({\n        [e.target.name]:e.target.value,\n        key:Date.now()\n      }\n    );\n  }\n\n  const deleteItem = (key)=>{\n    setItems(items.filter(item => item.key!=key));\n  }\n  const addItem = (e)=>{\n    e.preventDefault();\n    if(currentItem.text!==''){\n      setItems([...items, currentItem]);\n    }\n    setCurrentItem({\n      text:'',\n      key:''\n    });\n  }\n  const setUpdate = (text, key)=>{\n    items.map(item=>{\n      if(item.key===key) {\n        item.text = text;\n      }\n    })\n    setItems([...items]);\n  }\n\n  return (\n      <div className = \"App\">\n        <header>\n            <form id = \"to-do-form\" onSubmit = {addItem}>\n                <input \n                  type = \"text\" \n                  placeholder = \"Enter text\" \n                  name = \"text\"\n                  value ={text}\n                  onChange = {(e)=>handleInput(e)}\n                />\n                <button type = \"submit\">Add</button>\n            </form>\n        </header>\n        <ListItem \n          items = {items} \n          deleteItem = {deleteItem}\n          setUpdate = {setUpdate}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}